/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JingleMachineForm.java
 *
 * Created on 4-apr-2012, 17.43.20
 */
package it.pisa.pacciu.fmp3.view;

import it.pisa.pacciu.fmp3.jaxb.History.FileLoaded;
import it.pisa.pacciu.fmp3.service.HistoryService;
import it.pisa.pacciu.fmp3.service.MainService;
import it.pisa.pacciu.fmp3.view.util.FileTransferHandler;
import it.pisa.pacciu.fmp3.view.util.TableValueInserted;
import java.io.File;
import java.util.Collections;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import it.pisa.pacciu.fmp3.view.util.TransferableTreeNode;
import it.pisa.pacciu.fmp3.view.util.TreeDragGestureListener;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragSource;
import java.awt.event.KeyEvent;
import javax.swing.DropMode;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author m.luly
 */
public class JingleMachineForm extends javax.swing.JFrame {

    private TransferableTreeNode addNodes(TransferableTreeNode curTop, File dir) {
        TransferableTreeNode curDir = new TransferableTreeNode(dir.getPath());
        if (curTop != null) { // should only be null at root
            curTop.add(curDir);
        }
        return addChildren(dir, curDir);
    }

    private TransferableTreeNode addChildren(File dir, TransferableTreeNode curDir) {
        String curPath = dir.getPath();
        Vector ol = new Vector();
        String[] tmp = dir.list();
        if (tmp != null) {
            for (int i = 0; i < tmp.length; i++) {
                ol.addElement(tmp[i]);
            }
        }
        Collections.sort(ol, String.CASE_INSENSITIVE_ORDER);
        File f;
        for (int i = 0; i < ol.size(); i++) {
            String thisObject = (String) ol.elementAt(i);
            String newPath;
            if (curPath.equals(".")) {
                newPath = thisObject;
            } else {
                newPath = curPath + File.separator + thisObject;
            }
            if ((f = new File(newPath)).isDirectory()) {
                TransferableTreeNode newDir = new TransferableTreeNode(newPath);
                addNodesToDir(curDir, newDir, Boolean.TRUE);
                if (f.list() != null) {
                    String subPath = f.list().length > 0 ? (newPath + File.separator + f.list()[0]) : EMPTY;
                    addNodesToDir(newDir, new TransferableTreeNode(subPath), Boolean.FALSE);
                }
            } else {
                if (MP3_EXT.equals(
                        FilenameUtils.getExtension(thisObject).toLowerCase())) {
                    addNodesToDir(curDir, new TransferableTreeNode(thisObject), Boolean.TRUE);
                }
            }
        }
        if (curDir.getChildCount() == 0) {
            addNodesToDir(curDir, new TransferableTreeNode(EMPTY), Boolean.FALSE);
        }
        return curDir;
    }

    private void addNodesToDir(TransferableTreeNode curDir, TransferableTreeNode newNode, Boolean makeVisible) {
        curDir.add(newNode);
        if (defaultTreeModel != null) {
            defaultTreeModel.insertNodeInto(newNode, curDir, curDir.getChildCount() - 1);
            if (makeVisible) {
                fileSystem.scrollPathToVisible(new TreePath(newNode.getPath()));
            }
        }
    }

    private DefaultTableModel getDefaultTableModel() {
        String[] cols = {"File", "Key"};
        DefaultTableModel ris = new DefaultTableModel(null, cols) {

            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return mColIndex != 0;
            }
        };
        ris.addTableModelListener(new TableValueInserted());
        return ris;
    }

    /** Creates new form JingleMachineForm */
    public JingleMachineForm() {
        super("Radiocicletta Sound board :)");
        //        for (Object object : System.getProperties().keySet()) {
//            System.out.println("**********"+object+"::"+System.getProperty(object.toString()));
//        }
        initComponents();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSystemPanel = new javax.swing.JScrollPane();
        fileSystem = new javax.swing.JTree(addNodes(null, new File(hs.getRootPath())));
        tabellaPanel = new javax.swing.JScrollPane();
        tabella = new javax.swing.JTable();
        stopmusic = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        fileSystemPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileSystemPanelKeyPressed(evt);
            }
        });

        defaultTreeModel =(DefaultTreeModel)fileSystem.getModel();
        defaultTreeModel.addTreeModelListener(new MyTreeModelListener());
        fileSystem.getSelectionModel().setSelectionMode
        (TreeSelectionModel.SINGLE_TREE_SELECTION);
        fileSystem.setShowsRootHandles(true);
        fileSystem.setFocusable(Boolean.TRUE);
        DragSource dragSource = DragSource.getDefaultDragSource();
        dragSource
        .createDefaultDragGestureRecognizer(fileSystem,
            DnDConstants.ACTION_COPY_OR_MOVE,
            new TreeDragGestureListener());
        fileSystem.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                fileSystemTreeExpanded(evt);
            }
        });
        fileSystem.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                fileSystemValueChanged(evt);
            }
        });
        fileSystem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fileSystemKeyPressed(evt);
            }
        });
        fileSystemPanel.setViewportView(fileSystem);

        tabellaPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabellaPanelKeyPressed(evt);
            }
        });

        tabella.setModel(getDefaultTableModel());
        tabella.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tabella.setDropMode(DropMode.INSERT_ROWS);
        tabella.setFillsViewportHeight(Boolean.TRUE);
        tabella.setTransferHandler(new FileTransferHandler(tabella));
        DefaultTableModel tableModel=(DefaultTableModel)tabella.getModel();
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);
        tabella.setRowSorter(sorter);
        int row=0;
        for(FileLoaded fl:hs.getFileLoadeds()){
            String[] data={fl.getPath(),fl.getKey()};
            tableModel.insertRow(row++, data);
            ms.addFile((int)fl.getKey().charAt(0), fl.getPath());
        }
        tabella.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabellaPropertyChange(evt);
            }
        });
        tabella.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tabellaKeyPressed(evt);
            }
        });
        tabellaPanel.setViewportView(tabella);

        stopmusic.setText("Stop music");
        stopmusic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopmusicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(fileSystemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tabellaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 753, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(stopmusic, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileSystemPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(stopmusic, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(tabellaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fileSystemTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_fileSystemTreeExpanded
//        System.out.println(evt.getPath().getLastPathComponent().getClass());
        synchronized (this) {
            if (!expanding) {
                expanding = Boolean.TRUE;
                TransferableTreeNode selDir = (TransferableTreeNode) evt.getPath().getLastPathComponent();
                File selDirFile = new File(selDir.getUserObject().toString());
                if (selDirFile.exists() && selDirFile.isDirectory() && selDirFile.list().length > 0) {
                    selDir.removeAllChildren();
                    defaultTreeModel.reload();
                    addChildren(selDirFile, selDir);
                }
                expanding = Boolean.FALSE;
            }
        }
//        fileSystem.updateUI();
    }//GEN-LAST:event_fileSystemTreeExpanded

    private void fileSystemValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_fileSystemValueChanged
        TreePath selPath = evt.getNewLeadSelectionPath();
        if (selPath != null && selPath.getParentPath() == null) {
            int returnVal = fc.showOpenDialog(fileSystemPanel);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                defaultTreeModel.setRoot(addNodes(null, fc.getSelectedFile()));
                hs.setRootPath(fc.getSelectedFile().getAbsolutePath());
            }
        }
    }//GEN-LAST:event_fileSystemValueChanged

    private void tabellaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabellaPropertyChange
    }//GEN-LAST:event_tabellaPropertyChange

    private void keyPressed(java.awt.event.KeyEvent evt) {
        Integer keyCode = (int) evt.getKeyChar();
        if (ms.isKeyAvailable(keyCode)) {
            ms.playFile(keyCode);
        }
        this.requestFocusInWindow();
    }

    private void fileSystemPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileSystemPanelKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_fileSystemPanelKeyPressed

    private void tabellaPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabellaPanelKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_tabellaPanelKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    private void fileSystemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fileSystemKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_fileSystemKeyPressed

    private void tabellaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabellaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            DefaultTableModel tableModel = (DefaultTableModel) tabella.getModel();
            int[] rowToCancel = tabella.getSelectedRows();
            if (rowToCancel != null && rowToCancel.length > 0) {
                for (int i = rowToCancel.length - 1; i >= 0; i--) {
                    String key=tableModel.getValueAt(i, 1).toString();
                    tableModel.removeRow(rowToCancel[i]);
                    ms.removeFile(key.charAt(0));
                    hs.removeFileLoaded(key);
                }
            }
        } else {
            keyPressed(evt);
        }
    }//GEN-LAST:event_tabellaKeyPressed

    private void stopmusicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopmusicActionPerformed
        ms.stop();
        this.requestFocusInWindow();
    }//GEN-LAST:event_stopmusicActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JingleMachineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JingleMachineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JingleMachineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JingleMachineForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                new JingleMachineForm().setVisible(true);
            }
        });
    }
    private static Boolean expanding = Boolean.FALSE;
    private static final String EMPTY = "(Empty)";
    private static final String MP3_EXT = "mp3";
    private MainService ms = MainService.getInstance();
    private HistoryService hs = HistoryService.getInstance();
    private JFileChooser fc = new JFileChooser();
    private DefaultTreeModel defaultTreeModel = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree fileSystem;
    private javax.swing.JScrollPane fileSystemPanel;
    private javax.swing.JButton stopmusic;
    private javax.swing.JTable tabella;
    private javax.swing.JScrollPane tabellaPanel;
    // End of variables declaration//GEN-END:variables

    class MyTreeModelListener implements TreeModelListener {

        @Override
        public void treeNodesChanged(TreeModelEvent e) {
        }

        @Override
        public void treeNodesInserted(TreeModelEvent e) {
        }

        @Override
        public void treeNodesRemoved(TreeModelEvent e) {
        }

        @Override
        public void treeStructureChanged(TreeModelEvent e) {
        }
    }
}
